#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Mon Mar 19 13:30:46 2018

@author: eilam.goldenberg
"""


import os
import sys
#sys.path.append('C:\nrn\lib\python')
os.chdir('/home/ls/users/eilam.goldenberg/Documents/Active Cell Real Morphology/')
#os.chdir('/home/ls/users/eilam.goldenberg/Documents/coincidence/')

#os.environ["PYTHONPATH"] = os.environ["PYTHONPATH"] + ';C:\Python27' + ';C:\nrn' + ';C:\nrn\lib\hoc\import3d' + ';C:\nrn\lib\python'
#os.environ['NEURONHOME'] = 'C:\nrn'
#os.environ['Path'] = 'C:\nrn;C:\nrn\bin'

from neuron import h
from neuron import gui

#%%

#import pandas as pd
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
import numpy as np
#from random import shuffle
#from random import randint
#from random import gauss
import time
import math


#%%
h.load_file('nrngui.hoc')
h.load_file("import3d.hoc")

cvode = h.CVode()
cvode.active(1)

morphologyFilename = "morphologies/cell1.asc"
#morphologyFilename = "morphologies/cell2.asc"
#morphologyFilename = "morphologies/cell3.asc"
#morphologyFilename = "morphologies/V1.ASC"

#biophysicalModelFilename = "L5PCbiophys1.hoc"
#biophysicalModelFilename = "L5PCbiophys2.hoc"
#biophysicalModelFilename = "L5PCbiophys3.hoc"
#biophysicalModelFilename = "L5PCbiophys4.hoc"
#biophysicalModelFilename = "L5PCbiophys5.hoc"
biophysicalModelFilename = "L5PCbiophys5b.hoc"

#biophysicalModelTemplateFilename = "L5PCtemplate.hoc"
biophysicalModelTemplateFilename = "L5PCtemplate_2.hoc"


#%%

h.load_file(biophysicalModelFilename)
h.load_file(biophysicalModelTemplateFilename)
L5PC = h.L5PCtemplate(morphologyFilename)


#%%
listOfBasalSections  = [L5PC.dend[x] for x in range(len(L5PC.dend))]
listOfApicalSections = [L5PC.apic[x] for x in range(len(L5PC.apic))]
allSections = listOfBasalSections + listOfApicalSections
listOfRandBasalSectionInds  = np.random.randint(0,len(L5PC.dend),250)
#listOfRandApicalSectionInds = []
listOfRandApicalSectionInds = len(L5PC.dend) + len(L5PC.apic)/2 + np.random.randint(0,len(L5PC.apic)/10,150)
#syns = [listOfRandBasalSectionInds + listOfRandApicalSectionInds]
values = [0]*639 #*len(allSegments)

allSegments = []
# get a list of all segments
for k, section in enumerate(allSections):
    for currSegment in section:
        allSegments.append(currSegment)
        if k<len(L5PC.dend):
            for i in range(250):
                if k==listOfRandBasalSectionInds[i]:
                    values[len(allSegments)-1]=values[len(allSegments)-1]+1
        else:
            for i in range(150):
                if k==listOfRandApicalSectionInds[i]:
                    values[len(allSegments)-1]=values[len(allSegments)-1]+1

#%%
for k, section in enumerate(allSections):
    for currSegment in section:
        allSegments.append(currSegment)
#        if k<len(L5PC.dend):
#            for i in range(250):
#                if k==listOfRandBasalSectionInds[i]:
#                    values[len(allSegments)-1]=values[len(allSegments)-1]+1
#        else:
        if k>len(L5PC.dend):
            for i in range(10):
                if k==len(L5PC.dend)+20+i: #listOfRandApicalSectionInds[i]:
                    values[len(allSegments)-1]=values[len(allSegments)-1]+i
#                if k==len(L5PC.dend)+12: #listOfRandApicalSectionInds[i]:
#                    values[len(allSegments)-1]=values[len(allSegments)-1]+2
#                if k==len(L5PC.dend)+13: #listOfRandApicalSectionInds[i]:
#                    values[len(allSegments)-1]=values[len(allSegments)-1]+1
                
        
# color segments according to values
#values = np.random.rand(len(allSegments))

#values = [0]*len(allSegments)
#for i in range(len(allSegments)):
#    values[i]=math.exp(float(-((i-1)^2)/50))
#    if i>500:
#        values[i]=values[i]+math.exp(float(-(abs(i-600)^2)/50))

h('load_file("TColorMap.hoc")')
# select colormap
cm1 = h.TColorMap("cm/jet.cm")
#cm1 = h.TColorMap("cm/hsvmap.cm")
#cm1 = cm.coolwarm

# wheather to apply log on all values
LOG_SCALE = 0


for sec in allSections:
    sec.insert("var")

for seg, value in zip(allSegments, values):
    if LOG_SCALE:
        seg.zin_var = np.log(value)
    else:
        seg.zin_var = value

#h('load_file("TColorMap.hoc")')

ps_i = h.PlotShape()
ps_i.exec_menu("View = plot")
ps_i.variable("zin_var")

#%%
cm1.set_color_map(ps_i,min(values),max(values))
h.fast_flush_list.append(ps_i)
ps_i.exec_menu("Shape Plot")
ps_i.exec_menu('Show Diam')
ps_i.exec_menu("Variable Scale")

#%% save tree image
ps_i.printfile("syndist")

